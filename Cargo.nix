
# Generated by crate2nix 0.6.0-alpha.0 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ pkgs? import <nixpkgs> { config = {}; },
  lib? pkgs.lib,
  callPackage? pkgs.callPackage,
  stdenv? pkgs.stdenv,
  buildRustCrate? pkgs.buildRustCrate,
  fetchurl? pkgs.fetchurl,
  fetchCrate? pkgs.fetchCrate,
  # The features to enable for the root_crate or the workspace_members.
  rootFeatures? ["default"]}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "xidlehook" = {
      packageId = "xidlehook 0.8.0 (path+file:///home/user/Coding/Rust/xidlehook/xidlehook-daemon)";
      build = buildRustCrateWithFeatures {
        packageId = "xidlehook 0.8.0 (path+file:///home/user/Coding/Rust/xidlehook/xidlehook-daemon)";
        features = rootFeatures;
      };
    };
    "xidlehook-core" = {
      packageId = "xidlehook-core 0.1.0 (path+file:///home/user/Coding/Rust/xidlehook/xidlehook-core)";
      build = buildRustCrateWithFeatures {
        packageId = "xidlehook-core 0.1.0 (path+file:///home/user/Coding/Rust/xidlehook/xidlehook-core)";
        features = rootFeatures;
      };
    };
  };
  workspace_members =
    builtins.trace
      "workspace_members is deprecated in crate2nix 0.4. Please use workspaceMembers instead."
      lib.mapAttrs (n: v: v.build) workspaceMembers;

  #
  # "private" attributes that may change in every new version of crate2nix.
  #

  # Build and dependency information for crates.
  # Many of the fields are passed one-to-one to buildRustCrate.
  #
  # Noteworthy:
  # * `crateBin = [{name = ","; path = ",";}];`: a hack to disable building the binary.
  # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
  #   but with additional information which is used during dependency/feature resolution.
  # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.

  crates = {
    "aho-corasick 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "aho-corasick";
        version = "0.7.6";
        edition = "2015";
        sha256 = "1srdggg7iawz7rfyb79qfnz6vmzkgl6g6gabyd9ad6pbx7zzj8gz";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = {
          "memchr" = {
            packageId = "memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
        };
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
    "ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "ansi_term";
        version = "0.11.0";
        edition = "2015";
        sha256 = "08fk0p2xvkqpmz3zlrwnf6l8sj2vngw464rvzspzp31sbgxbwm4v";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = {
          "winapi" = {
            packageId = "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "windows");
            features = [ "errhandlingapi" "consoleapi" "processenv" ];
          };
        };
        features = {
        };
      };
    "arrayvec 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "arrayvec";
        version = "0.4.11";
        edition = "2015";
        sha256 = "1bd08rakkyr9jlf538cs80s3ly464ni3afr63zlw860ndar1zfmv";
        authors = [
          "bluss"
        ];
        dependencies = {
          "nodrop" = {
            packageId = "nodrop 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
        };
        features = {
          "default" = [ "std" ];
          "serde-1" = [ "serde" ];
        };
      };
    "async-macros 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "async-macros";
        version = "1.0.0";
        edition = "2018";
        sha256 = "0vnkg7c9f8jfk1f3z0v4rnp2d9p8fcilxbm92pv502n94k62l7zm";
        authors = [
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
        ];
        dependencies = {
          "futures-core-preview" = "futures-core-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
          "pin-utils" = "pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "async-std 0.99.9 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "async-std";
        version = "0.99.9";
        edition = "2018";
        sha256 = "0s12cqgq22fy0bzm3axlfbbm5bk3h40rijr0wvjjycj88r3x2vry";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
          "Contributors to async-std"
        ];
        dependencies = {
          "async-macros" = "async-macros 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "async-task" = "async-task 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "cfg-if" = "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)";
          "crossbeam-channel" = "crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)";
          "crossbeam-deque" = "crossbeam-deque 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)";
          "futures-core-preview" = "futures-core-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
          "futures-io-preview" = "futures-io-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
          "futures-timer" = "futures-timer 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "kv-log-macro" = "kv-log-macro 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)";
          "lazy_static" = "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "log" = {
            packageId = "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)";
            features = [ "kv_unstable" ];
          };
          "memchr" = "memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)";
          "mio" = "mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)";
          "mio-uds" = "mio-uds 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)";
          "num_cpus" = "num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)";
          "pin-utils" = "pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)";
          "slab" = "slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "docs" = [ "broadcaster" ];
          "unstable" = [ "broadcaster" ];
        };
      };
    "async-task 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "async-task";
        version = "1.0.0";
        edition = "2018";
        sha256 = "02f12kszndllg3kd3vxw1pk288jmap2bk40a771ji2p9ascrgs8d";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = {
          "crossbeam-utils" = "crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "atty";
        version = "0.2.13";
        edition = "2015";
        sha256 = "0a1ii8h9fvvrq05bz7j135zjjz1sjz6n2invn2ngxqri0jxgmip2";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = {
          "libc" = {
            packageId = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
            target = target."unix";
          };
          "winapi" = {
            packageId = "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          };
        };
        features = {
        };
      };
    "bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "bitflags";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0cybfqfkplbznkvm0cjn6wv7vpp718i47ld4g84qrb0lwa0jpmcg";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "cc";
        version = "1.0.45";
        edition = "2018";
        # Hack to suppress building binaries
        crateBin = [{name = ","; path = ",";}];
        sha256 = "0qhw9k5av9x6yvv4jfrji576wy90vgdnr76cifs8xqm70scdl2sm";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "num_cpus" "jobserver" ];
        };
      };
    "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "cfg-if";
        version = "0.1.10";
        edition = "2018";
        sha256 = "0x52qzpbyl2f2jqs7kkqzgfki2cpq99gpfjjigdp8pwwfqk01007";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
    "clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "clap";
        version = "2.33.0";
        edition = "2015";
        sha256 = "054n9ngh6pkknpmd4acgdsp40iw6f5jzq8a4h2b76gnbvk6p5xjh";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
        ];
        dependencies = {
          "ansi_term" = {
            packageId = "ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            target = (!target."windows");
          };
          "atty" = {
            packageId = "atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "bitflags" = "bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "strsim" = {
            packageId = "strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "textwrap" = "textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "unicode-width" = "unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)";
          "vec_map" = {
            packageId = "vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
        };
        features = {
          "color" = [ "ansi_term" "atty" ];
          "default" = [ "suggestions" "color" "vec_map" ];
          "doc" = [ "yaml" ];
          "lints" = [ "clippy" ];
          "suggestions" = [ "strsim" ];
          "wrap_help" = [ "term_size" "textwrap/term_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "ansi_term" "atty" "color" "default" "strsim" "suggestions" "vec_map" ];
      };
    "crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "crossbeam-channel";
        version = "0.3.9";
        edition = "2015";
        sha256 = "0si8kg061qgadx56dfyil2jq0ffckg6sk3mf2vl8ha8fwi9kd34h";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = {
          "crossbeam-utils" = "crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "crossbeam-deque 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "crossbeam-deque";
        version = "0.7.1";
        edition = "2015";
        sha256 = "11l7idrx3diksrxbaa13f9h9i6f3456qq3647f3kglxfjmz9bm8s";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = {
          "crossbeam-epoch" = "crossbeam-epoch 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)";
          "crossbeam-utils" = "crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "crossbeam-epoch 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "crossbeam-epoch";
        version = "0.7.2";
        edition = "2015";
        sha256 = "015axh69r6ggj481ncqj09d7ssbqf8psgyqq9hhpkrh3j7xn4vmn";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = {
          "arrayvec" = {
            packageId = "arrayvec 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "cfg-if" = "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)";
          "crossbeam-utils" = {
            packageId = "crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "lazy_static" = {
            packageId = "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "memoffset" = "memoffset 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)";
          "scopeguard" = {
            packageId = "scopeguard 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
        };
        features = {
          "alloc" = [ "crossbeam-utils/alloc" ];
          "default" = [ "std" ];
          "nightly" = [ "crossbeam-utils/nightly" "arrayvec/use_union" ];
          "std" = [ "crossbeam-utils/std" "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
    "crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "crossbeam-utils";
        version = "0.6.6";
        edition = "2015";
        sha256 = "01gxccmrjkkcavdh8fc01kj3b5fmk10f0lkx66jmnv69kcssry72";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = {
          "cfg-if" = "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)";
          "lazy_static" = {
            packageId = "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
        };
        features = {
          "default" = [ "std" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
    "env_logger 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "env_logger";
        version = "0.7.0";
        edition = "2018";
        sha256 = "0j8afwla5z038iqnq3s56fljw49v0sl9hnywr1pgmyz1dz40fpky";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = {
          "atty" = {
            packageId = "atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "humantime" = {
            packageId = "humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "log" = {
            packageId = "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)";
            features = [ "std" ];
          };
          "regex" = {
            packageId = "regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "termcolor" = {
            packageId = "termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
        };
        features = {
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
        };
        resolvedDefaultFeatures = [ "atty" "default" "humantime" "regex" "termcolor" ];
      };
    "fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "fuchsia-zircon";
        version = "0.3.3";
        edition = "2015";
        sha256 = "0jrf4shb1699r4la8z358vri8318w4mdi6qzfqy30p2ymjlca4gk";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        dependencies = {
          "bitflags" = "bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "fuchsia-zircon-sys" = "fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "fuchsia-zircon-sys";
        version = "0.3.3";
        edition = "2015";
        sha256 = "08jp1zxrm9jbrr6l26bjal4dbm8bxfy57ickdgibsqxr1n9j3hf5";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        features = {
        };
      };
    "futures-channel-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "futures-channel-preview";
        version = "0.3.0-alpha.19";
        edition = "2018";
        sha256 = "0ki1j5sp7h67dwf884xqidrl3sr67bfpbz8iv4ffd83b5iyaz05v";
        libName = "futures_channel";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "futures-core-preview" = {
            packageId = "futures-core-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "futures-sink-preview" = {
            packageId = "futures-sink-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            usesDefaultFeatures = false;
          };
        };
        features = {
          "alloc" = [ "futures-core-preview/alloc" ];
          "cfg-target-has-atomic" = [ "futures-core-preview/cfg-target-has-atomic" ];
          "default" = [ "std" ];
          "sink" = [ "futures-sink-preview" ];
          "std" = [ "alloc" "futures-core-preview/std" ];
          "unstable" = [ "futures-core-preview/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "futures-sink-preview" "sink" "std" ];
      };
    "futures-core-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "futures-core-preview";
        version = "0.3.0-alpha.19";
        edition = "2018";
        sha256 = "17w5xmgr1yi65kgf8mkw3p037csrw5bkzs3j82ab5shv10mzbp24";
        libName = "futures_core";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
    "futures-executor-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "futures-executor-preview";
        version = "0.3.0-alpha.19";
        edition = "2018";
        sha256 = "1lhvjs3wirzfq6pgg489msbqwj1ay7aj79h09nc095a6pgzxmkfp";
        libName = "futures_executor";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "futures-core-preview" = {
            packageId = "futures-core-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "futures-util-preview" = {
            packageId = "futures-util-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "num_cpus" = {
            packageId = "num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
        };
        features = {
          "default" = [ "std" ];
          "std" = [ "futures-core-preview/std" "futures-util-preview/std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "num_cpus" "std" ];
      };
    "futures-io-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "futures-io-preview";
        version = "0.3.0-alpha.19";
        edition = "2018";
        sha256 = "0p4qa828v0xyafgd3gs41503falcf2p9sdgfp4h7k4g7p65pz10p";
        libName = "futures_io";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
    "futures-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "futures-preview";
        version = "0.3.0-alpha.19";
        edition = "2018";
        sha256 = "0yxvbnacshn2k1f51rqajgiq8av3qg36zv9579csq1fxcp0v3lv9";
        libName = "futures";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "futures-channel-preview" = {
            packageId = "futures-channel-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          };
          "futures-core-preview" = {
            packageId = "futures-core-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "futures-executor-preview" = {
            packageId = "futures-executor-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "futures-io-preview" = {
            packageId = "futures-io-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "futures-sink-preview" = {
            packageId = "futures-sink-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "futures-util-preview" = {
            packageId = "futures-util-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          };
        };
        features = {
          "alloc" = [ "futures-core-preview/alloc" "futures-sink-preview/alloc" "futures-channel-preview/alloc" "futures-util-preview/alloc" ];
          "async-await" = [ "futures-util-preview/async-await" "futures-util-preview/join-macro" "futures-util-preview/select-macro" ];
          "bilock" = [ "futures-util-preview/bilock" ];
          "cfg-target-has-atomic" = [ "futures-core-preview/cfg-target-has-atomic" "futures-channel-preview/cfg-target-has-atomic" "futures-util-preview/cfg-target-has-atomic" ];
          "compat" = [ "std" "futures-util-preview/compat" ];
          "default" = [ "std" ];
          "io-compat" = [ "compat" "futures-util-preview/io-compat" ];
          "read_initializer" = [ "futures-io-preview/read_initializer" "futures-util-preview/read_initializer" ];
          "std" = [ "alloc" "futures-core-preview/std" "futures-executor-preview/std" "futures-io-preview/std" "futures-sink-preview/std" "futures-util-preview/std" "futures-util-preview/io" "futures-util-preview/channel" ];
          "unstable" = [ "futures-core-preview/unstable" "futures-channel-preview/unstable" "futures-io-preview/unstable" "futures-util-preview/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
    "futures-sink-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "futures-sink-preview";
        version = "0.3.0-alpha.19";
        edition = "2018";
        sha256 = "0q136w17bfx872s5p1w6qyl2imfkwhncvl5n9cqlz6im79k1kh4w";
        libName = "futures_sink";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
    "futures-timer 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "futures-timer";
        version = "0.4.0";
        edition = "2018";
        sha256 = "0qp1n90g9xibacga063dpsjz4c0rq27vfq0j530qkpyhyh9yqvfa";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "futures-core-preview" = "futures-core-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
          "futures-util-preview" = "futures-util-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
          "pin-utils" = "pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "futures-util-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "futures-util-preview";
        version = "0.3.0-alpha.19";
        edition = "2018";
        sha256 = "0iqz5agr8hv1pyfvjvpw8j0qzdzch4ch0x5xzm3nv4gp7n3xmdnp";
        libName = "futures_util";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "futures-channel-preview" = {
            packageId = "futures-channel-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          };
          "futures-core-preview" = {
            packageId = "futures-core-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "futures-io-preview" = {
            packageId = "futures-io-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          };
          "futures-sink-preview" = {
            packageId = "futures-sink-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            usesDefaultFeatures = false;
          };
          "memchr" = {
            packageId = "memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "pin-utils" = "pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)";
          "slab" = {
            packageId = "slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
        };
        features = {
          "alloc" = [ "futures-core-preview/alloc" ];
          "cfg-target-has-atomic" = [ "futures-core-preview/cfg-target-has-atomic" ];
          "channel" = [ "std" "futures-channel-preview" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" ];
          "io" = [ "std" "futures-io-preview" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "join-macro" = [ "async-await" "futures-join-macro-preview" "proc-macro-hack" "proc-macro-nested" ];
          "read_initializer" = [ "io" "futures-io-preview/read_initializer" "futures-io-preview/unstable" ];
          "select-macro" = [ "async-await" "futures-select-macro-preview" "proc-macro-hack" "proc-macro-nested" ];
          "sink" = [ "futures-sink-preview" ];
          "std" = [ "alloc" "futures-core-preview/std" "slab" ];
          "unstable" = [ "futures-core-preview/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "channel" "default" "futures-channel-preview" "futures-io-preview" "futures-sink-preview" "io" "memchr" "sink" "slab" "std" ];
      };
    "heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "heck";
        version = "0.3.1";
        edition = "2015";
        sha256 = "1q7vmnlh62kls6cvkfhbcacxkawaznaqa5wwm9dg1xkcza846c3d";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = {
          "unicode-segmentation" = "unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "humantime";
        version = "1.3.0";
        edition = "2015";
        sha256 = "1y7q207gg33jr5rnlnb0h08k00i54g9fypf3drjk8g1sq2swn92r";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];
        dependencies = {
          "quick-error" = "quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "iovec";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0vjymmb7wj4v4kza5jjn48fcdb85j3k37y7msjl3ifz0p9yiyp2r";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = {
          "libc" = {
            packageId = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."unix";
          };
          "winapi" = {
            packageId = "winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
          };
        };
        features = {
        };
      };
    "itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "itoa";
        version = "0.4.4";
        edition = "2015";
        sha256 = "1fqc34xzzl2spfdawxd9awhzl0fwf1y6y4i94l8bq8rfrzd90awl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
    "kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "kernel32-sys";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1lrw1hbinyvr6cp28g60z97w32w8vsk6pahk64pmrv2fmby8srfj";
        libName = "kernel32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = {
          "winapi" = "winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        buildDependencies = {
          "winapi-build" = "winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "kv-log-macro 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "kv-log-macro";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0s0q0zghvlb68ipkvgnihazfk0rp8fmds8p3fmbzfrpqmdw48k76";
        authors = [
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
        ];
        dependencies = {
          "log" = {
            packageId = "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)";
            features = [ "kv_unstable" ];
          };
        };
        features = {
        };
      };
    "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "13h6sdghdcy7vcqsm2gasfw3qg7ssa0fl3sw7lq6pdkbk52wbyfr";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
    "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "libc";
        version = "0.2.62";
        edition = "2015";
        sha256 = "1vsb4pyn6gl6sri6cv5hin5wjfgk7lk2bshzmxb1xnkckjhz4gbx";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "extra_traits" "std" ];
      };
    "libpulse-binding 2.13.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "libpulse-binding";
        version = "2.13.0";
        edition = "2018";
        sha256 = "0ls0dk1xjcrma226vx867gfch67l3zm72q1sl3rq5h37kv38zsh7";
        authors = [
          "Lyndon Brown <jnqnfe@gmail.com>"
        ];
        dependencies = {
          "libc" = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
          "libpulse-sys" = {
            packageId = "libpulse-sys 1.11.0 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
        };
        features = {
          "default" = [ "pa_latest_common" ];
          "dox" = [ "libpulse-sys/dox" ];
          "latest_pa_common_compatibility" = [ "pa_latest_common" ];
          "latest_pa_compatibility" = [ "pa_latest" ];
          "pa_latest" = [ "pa_v13" ];
          "pa_latest_common" = [ "pa_v12" ];
          "pa_v12" = [ "pa_v8" "libpulse-sys/pa_v12" ];
          "pa_v12_compatibility" = [ "pa_v12" ];
          "pa_v13" = [ "pa_v12" "libpulse-sys/pa_v13" ];
          "pa_v5" = [ "libpulse-sys/pa_v5" ];
          "pa_v6" = [ "pa_v5" "libpulse-sys/pa_v6" ];
          "pa_v8" = [ "pa_v6" "libpulse-sys/pa_v8" ];
        };
        resolvedDefaultFeatures = [ "pa_v12" "pa_v12_compatibility" "pa_v5" "pa_v6" "pa_v8" ];
      };
    "libpulse-sys 1.11.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "libpulse-sys";
        version = "1.11.0";
        edition = "2018";
        sha256 = "0kgj999bgs79yffbj2rxxzkapw0yk3911wjifpw5q6ar7323r8zv";
        authors = [
          "Lyndon Brown <jnqnfe@gmail.com>"
        ];
        dependencies = {
          "libc" = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        buildDependencies = {
          "pkg-config" = {
            packageId = "pkg-config 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "linux");
          };
        };
        features = {
          "default" = [ "pa_latest_common" ];
          "latest_pa_common_compatibility" = [ "pa_latest_common" ];
          "latest_pa_compatibility" = [ "pa_latest" ];
          "pa_latest" = [ "pa_v13" ];
          "pa_latest_common" = [ "pa_v12" ];
          "pa_v12" = [ "pa_v8" ];
          "pa_v12_compatibility" = [ "pa_v12" ];
          "pa_v13" = [ "pa_v12" ];
          "pa_v6" = [ "pa_v5" ];
          "pa_v8" = [ "pa_v6" ];
        };
        resolvedDefaultFeatures = [ "pa_v12" "pa_v5" "pa_v6" "pa_v8" ];
      };
    "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "log";
        version = "0.4.8";
        edition = "2015";
        sha256 = "0wvzzzcn89dai172rrqcyz06pzldyyy0lf0w71csmn206rdpnb15";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = {
          "cfg-if" = "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "kv_unstable_sval" = [ "kv_unstable" "sval/fmt" ];
        };
        resolvedDefaultFeatures = [ "kv_unstable" "std" ];
      };
    "memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "memchr";
        version = "2.2.1";
        edition = "2015";
        sha256 = "1mj5z8lhz6jbapslpq8a39pwcsl1p0jmgp7wgcj7nv4pcqhya7a0";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
    "memoffset 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "memoffset";
        version = "0.5.1";
        edition = "2015";
        sha256 = "0fsk7kfk193f1aamafl45vvcp7j6p7c14ss7d583fijw3w5kj69k";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = {
          "rustc_version" = "rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "mio";
        version = "0.6.19";
        edition = "2015";
        sha256 = "0pjazzvqwkb4fgmm4b3m8i05c2gq60lvqqia0faawswgqy7rvgac";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = {
          "fuchsia-zircon" = {
            packageId = "fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "fuchsia");
          };
          "fuchsia-zircon-sys" = {
            packageId = "fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "fuchsia");
          };
          "iovec" = "iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)";
          "kernel32-sys" = {
            packageId = "kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
          };
          "libc" = {
            packageId = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."unix";
          };
          "log" = "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)";
          "miow" = {
            packageId = "miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
          };
          "net2" = "net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)";
          "slab" = "slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)";
          "winapi" = {
            packageId = "winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
          };
        };
        features = {
          "default" = [ "with-deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" "with-deprecated" ];
      };
    "mio-uds 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "mio-uds";
        version = "0.6.7";
        edition = "2015";
        sha256 = "1gff9908pvvysv7zgxvyxy7x34fnhs088cr0j8mgwj8j24mswrhm";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "iovec" = {
            packageId = "iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."unix";
          };
          "libc" = {
            packageId = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."unix";
          };
          "mio" = {
            packageId = "mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."unix";
          };
        };
        features = {
        };
      };
    "miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "miow";
        version = "0.2.1";
        edition = "2015";
        sha256 = "14f8zkc6ix7mkyis1vsqnim8m29b6l55abkba3p2yz7j1ibcvrl0";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "kernel32-sys" = "kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)";
          "net2" = {
            packageId = "net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "winapi" = "winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)";
          "ws2_32-sys" = "ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "net2";
        version = "0.2.33";
        edition = "2015";
        sha256 = "1qnmajafgybj5wyxz9iffa8x5wgbwd2znfklmhqj7vl6lw1m65mq";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "cfg-if" = "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)";
          "libc" = {
            packageId = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
            target = ((target."os" == "redox") || target."unix");
          };
          "winapi" = {
            packageId = "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
            features = [ "handleapi" "winsock2" "ws2def" "ws2ipdef" "ws2tcpip" ];
          };
        };
        features = {
          "default" = [ "duration" ];
        };
        resolvedDefaultFeatures = [ "default" "duration" ];
      };
    "nix 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "nix";
        version = "0.15.0";
        edition = "2015";
        sha256 = "183si5x662vdpvh3956gz5vmqg23zzzxjbc6cvmfp8xc51x7w9f8";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = {
          "bitflags" = "bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "cfg-if" = "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)";
          "libc" = {
            packageId = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
            features = [ "extra_traits" ];
          };
          "void" = "void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        buildDependencies = {
          "cc" = {
            packageId = "cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "dragonfly");
          };
        };
        features = {
        };
      };
    "nodrop 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "nodrop";
        version = "0.1.13";
        edition = "2015";
        sha256 = "0gkfx6wihr9z0m8nbdhma5pyvbipznjpkzny2d4zkc05b0vnhinb";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_union" = [ "nodrop-union" ];
        };
      };
    "num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "num_cpus";
        version = "1.10.1";
        edition = "2015";
        sha256 = "1zi5s2cbnqqb0k0kdd6gqn2x97f9bssv44430h6w28awwzppyh8i";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = {
          "libc" = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "pin-utils";
        version = "0.1.0-alpha.4";
        edition = "2018";
        sha256 = "1fl7h1f6gr7qj903k3ir2vw993gbj4dd775s0idq4pzsbjqjj3x1";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];
        features = {
        };
      };
    "pkg-config 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "pkg-config";
        version = "0.3.16";
        edition = "2015";
        sha256 = "1a2gg5a9l74brz1vzkkzfl8aihd7b4rk3vhbmiahkmpzavywza5j";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
        };
      };
    "proc-macro-error 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "proc-macro-error";
        version = "0.2.6";
        edition = "2018";
        sha256 = "0jvxpc2g64ww40179nalqhwlc906qbskdn9j58v34q3d5f6yl9wj";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = {
          "proc-macro2" = "proc-macro2 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)";
          "quote" = "quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)";
          "syn" = "syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "proc-macro2 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "proc-macro2";
        version = "1.0.5";
        edition = "2018";
        sha256 = "1h9afwvh0g04rrf31rs8y3r3738vcf69rafw82g3jx38ij5v2arn";
        libName = "proc_macro2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "unicode-xid" = "unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
    "quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "quick-error";
        version = "1.2.2";
        edition = "2015";
        sha256 = "192a3adc5phgpibgqblsdx1b421l5yg9bjbmv552qqq9f37h60k5";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];
        features = {
        };
      };
    "quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "quote";
        version = "1.0.2";
        edition = "2018";
        sha256 = "0r7030w7dymarn92gjgm02hsm04fwsfs6f1l20wdqiyrm9z8rs5q";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = {
          "proc-macro2" = {
            packageId = "proc-macro2 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
        };
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
    "regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "regex";
        version = "1.3.1";
        edition = "2015";
        sha256 = "0508b01q7iwky5gzp1cc3lpz6al1qam8skgcvkfgxr67nikiz7jn";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = {
          "aho-corasick" = {
            packageId = "aho-corasick 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "memchr" = {
            packageId = "memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "regex-syntax" = {
            packageId = "regex-syntax 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "thread_local" = {
            packageId = "thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
        };
        features = {
          "default" = [ "std" "perf" "unicode" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-inline" "perf-literal" ];
          "perf-cache" = [ "thread_local" ];
          "perf-literal" = [ "aho-corasick" "memchr" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
          "unicode-age" = [ "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "aho-corasick" "default" "memchr" "perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "std" "thread_local" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
    "regex-syntax 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "regex-syntax";
        version = "0.6.12";
        edition = "2015";
        sha256 = "1lqhddhwzpgq8zfkxhm241n7g4m3yc11fb4098dkgawbxvybr53v";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
    "rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "rustc_version";
        version = "0.2.3";
        edition = "2015";
        sha256 = "0rgwzbgs3i9fqjm1p4ra3n7frafmpwl29c8lw85kv1rxn7n2zaa7";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = {
          "semver" = "semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "ryu 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "ryu";
        version = "1.0.0";
        edition = "2015";
        sha256 = "0hysqba7hi31xw1jka8jh7qb4m9fx5l6vik55wpc3rpsg46cwgbf";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
      };
    "scopeguard 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "scopeguard";
        version = "1.0.0";
        edition = "2015";
        sha256 = "15vrix0jx3i4naqnjswddzn4m036krrv71a8vkh3b1zq4hxmrb0q";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
    "semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "semver";
        version = "0.9.0";
        edition = "2015";
        sha256 = "0azak2lb2wc36s3x15az886kck7rpnksrw14lalm157rg9sc9z63";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = {
          "semver-parser" = "semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "ci" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "semver-parser";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1da66c8413yakx0y15k8c055yna5lyb6fr0fw9318kdwkrk5k12h";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];
        features = {
        };
      };
    "serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "serde";
        version = "1.0.101";
        edition = "2015";
        sha256 = "0sacv3njx99yr8gxsl80cy1h98b9vd1pv6aa8ncbnk0pys8r82vn";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = {
          "serde_derive" = {
            packageId = "serde_derive 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
        };
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "serde_derive" "std" ];
      };
    "serde_derive 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "serde_derive";
        version = "1.0.101";
        edition = "2015";
        sha256 = "093x99qff1ihjmy32fp1gxp66qh0nni349j20y3w0h33wqk19dr0";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = {
          "proc-macro2" = "proc-macro2 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)";
          "quote" = "quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)";
          "syn" = {
            packageId = "syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)";
            features = [ "visit" ];
          };
        };
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "serde_json";
        version = "1.0.41";
        edition = "2015";
        sha256 = "0j3qhfy2hj3vjlc6hi34k0zlsaj5mxnk9dy6lp8a8snj5rm9vrhd";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = {
          "itoa" = "itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)";
          "ryu" = "ryu 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "serde" = "serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "slab";
        version = "0.4.2";
        edition = "2015";
        sha256 = "0h1l2z7qy6207kv0v3iigdf2xfk9yrhbwj1svlxk6wxjmdxvgdl7";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        features = {
        };
      };
    "strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "strsim";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0d3jsdz22wgjyxdakqnvdgmwjdvkximz50d9zfk4qlalw635qcvy";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
        features = {
        };
      };
    "structopt 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "structopt";
        version = "0.3.2";
        edition = "2018";
        sha256 = "1hwmlrb1vfg7zszc4axa0xr7kx468642z74whv94wi4qqvc1sblr";
        authors = [
          "Guillaume Pinot <texitoi@texitoi.eu>"
          "others"
        ];
        dependencies = {
          "clap" = {
            packageId = "clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "structopt-derive" = "structopt-derive 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "color" = [ "clap/color" ];
          "debug" = [ "clap/debug" ];
          "default" = [ "clap/default" ];
          "doc" = [ "clap/doc" ];
          "lints" = [ "clap/lints" ];
          "no_cargo" = [ "clap/no_cargo" ];
          "paw" = [ "structopt-derive/paw" ];
          "suggestions" = [ "clap/suggestions" ];
          "wrap_help" = [ "clap/wrap_help" ];
          "yaml" = [ "clap/yaml" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "structopt-derive 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "structopt-derive";
        version = "0.3.2";
        edition = "2018";
        sha256 = "1ivadxgks2h319kyq157bj4sz37r0fra09nkz7f9z5wcbdmgqd6p";
        procMacro = true;
        authors = [
          "Guillaume Pinot <texitoi@texitoi.eu>"
        ];
        dependencies = {
          "heck" = "heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)";
          "proc-macro-error" = "proc-macro-error 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)";
          "proc-macro2" = "proc-macro2 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)";
          "quote" = "quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)";
          "syn" = {
            packageId = "syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)";
            features = [ "full" ];
          };
        };
        features = {
        };
      };
    "syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "syn";
        version = "1.0.5";
        edition = "2018";
        sha256 = "08qbk425r8c4q4rrpq1q9wkd3v3bji8nlfaxj8v4l7lkpjkh0xgs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = {
          "proc-macro2" = {
            packageId = "proc-macro2 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "quote" = {
            packageId = "quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            usesDefaultFeatures = false;
          };
          "unicode-xid" = "unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
    "termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "termcolor";
        version = "1.0.5";
        edition = "2015";
        sha256 = "16266x431hbkmvyh0pv4yn7wm2kagicqaq6hy4fabn93c08sx0gp";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = {
          "wincolor" = {
            packageId = "wincolor 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
          };
        };
        features = {
        };
      };
    "textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "textwrap";
        version = "0.11.0";
        edition = "2015";
        sha256 = "0s25qh49n7kjayrdj4q3v0jk0jc6vy88rdw0bvgfxqlscpqpxi7d";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = {
          "unicode-width" = "unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "thread_local";
        version = "0.3.6";
        edition = "2015";
        sha256 = "02rksdwjmz2pw9bmgbb4c0bgkbq5z6nvg510sq1s6y2j1gam0c7i";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = {
          "lazy_static" = "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unicode-segmentation";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0jnns99wpjjpqzdn9jiplsr003rr41i95c008jb4inccb3avypp0";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
      };
    "unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unicode-width";
        version = "0.1.6";
        edition = "2015";
        sha256 = "1mss965j7d8pv7z7zg6qfkcb7lyhxkxvbh8akzr4xxxx3vzazwsi";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unicode-xid";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1c85gb3p3qhbjvfyjb31m06la4f024jx319k10ig7n47dz2fk8v7";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "vec_map";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1jj2nrg8h3l53d43rwkpkikq5a5x15ms4rf1rw92hp5lrqhi8mpi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
        };
      };
    "void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "void";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0h1dm0dx8dhf56a83k68mijyxigqhizpskwxfdrs1drwv2cdclv3";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
    "winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0a45b58ywf12vb7gvj6h3j264nydynmzyqz8d8rqxsj6icqv82as";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        features = {
        };
      };
    "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi";
        version = "0.3.8";
        edition = "2015";
        sha256 = "084ialbgww1vxry341fmkg5crgpvab3w52ahx1wa54yqjgym0vxs";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = {
          "winapi-i686-pc-windows-gnu" = {
            packageId = "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          };
          "winapi-x86_64-pc-windows-gnu" = {
            packageId = "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          };
        };
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "minwinbase" "minwindef" "processenv" "std" "winbase" "wincon" "winerror" "winnt" "winsock2" "ws2def" "ws2ipdef" "ws2tcpip" ];
      };
    "winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi-build";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1lxlpi87rkhxcwp2ykf1ldw3p108hwm24nywf3jfrvmff4rjhqga";
        libName = "build";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        features = {
        };
      };
    "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "05ihkij18r4gamjpxj4gra24514can762imjzlmak5wlzidplzrp";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        features = {
        };
      };
    "winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi-util";
        version = "0.1.2";
        edition = "2015";
        sha256 = "07jj7rg7nndd7bqhjin1xphbv8kb5clvhzpqpxkvm3wl84r3mj1h";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = {
          "winapi" = {
            packageId = "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          };
        };
        features = {
        };
      };
    "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0n1ylmlsb8yg1v583i4xy0qmqg42275flvbc51hdqjjfjcl9vlbj";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        features = {
        };
      };
    "wincolor 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "wincolor";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0bxgy5pf0pzykb21xipb41yfxs60inrs5kyavllphbrka5aqps89";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = {
          "winapi" = {
            packageId = "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)";
            features = [ "minwindef" "wincon" ];
          };
          "winapi-util" = "winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "ws2_32-sys";
        version = "0.2.1";
        edition = "2015";
        sha256 = "1zpy9d9wk11sj17fczfngcj28w4xxjs3b4n036yzpy38dxp4f7kc";
        libName = "ws2_32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = {
          "winapi" = "winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        buildDependencies = {
          "winapi-build" = "winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "x11 2.18.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "x11";
        version = "2.18.1";
        edition = "2015";
        sha256 = "0cn113bgnvi529bgng46m815zxaypd36s5v61c41iwq4c5bgfkzd";
        authors = [
          "daggerbot <daggerbot@gmail.com>"
          "Erle Pereira <erle@erlepereira.com>"
        ];
        dependencies = {
          "libc" = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        buildDependencies = {
          "pkg-config" = "pkg-config 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "xrecord" = [ "xtst" ];
          "xtest" = [ "xtst" ];
        };
        resolvedDefaultFeatures = [ "xlib" ];
      };
    "xcb 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "xcb";
        version = "0.8.2";
        edition = "2015";
        sha256 = "06l8jms57wvz01vx82a3cwak9b9qwdkadvpmkk1zimy2qg7i7dkl";
        authors = [
          "Remi Thebault <remi.thebault@gmail.com>"
        ];
        dependencies = {
          "libc" = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
          "log" = "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)";
          "x11" = {
            packageId = "x11 2.18.1 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            features = [ "xlib" ];
          };
        };
        buildDependencies = {
          "libc" = "libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "composite" = [ "xfixes" ];
          "damage" = [ "xfixes" ];
          "debug_all" = [ "thread" "composite" "damage" "dpms" "dri2" "dri3" "glx" "randr" "record" "render" "res" "screensaver" "shape" "shm" "xevie" "xf86dri" "xfixes" "xinerama" "xkb" "xprint" "xselinux" "xtest" "xvmc" "xv" "xlib_xcb" ];
          "present" = [ "render" "xfixes" "sync" ];
          "randr" = [ "render" ];
          "xfixes" = [ "render" "shape" ];
          "xinput" = [ "xfixes" ];
          "xlib_xcb" = [ "x11/xlib" ];
          "xv" = [ "shm" ];
          "xvmc" = [ "xv" ];
        };
        resolvedDefaultFeatures = [ "screensaver" "x11" ];
      };
    "xidlehook 0.8.0 (path+file:///home/user/Coding/Rust/xidlehook/xidlehook-daemon)"
      = rec {
        crateName = "xidlehook";
        version = "0.8.0";
        edition = "2018";
        src = (builtins.filterSource sourceFilter ./xidlehook-daemon);
        authors = [
          "jD91mZM2 <me@krake.one>"
        ];
        dependencies = {
          "async-std" = "async-std 0.99.9 (registry+https://github.com/rust-lang/crates.io-index)";
          "env_logger" = "env_logger 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "futures-preview" = "futures-preview 0.3.0-alpha.19 (registry+https://github.com/rust-lang/crates.io-index)";
          "log" = "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)";
          "nix" = "nix 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "serde" = {
            packageId = "serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)";
            features = [ "derive" ];
          };
          "serde_json" = "serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)";
          "structopt" = "structopt 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)";
          "xcb" = {
            packageId = "xcb 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)";
            features = [ "x11" "screensaver" ];
          };
          "xidlehook-core" = {
            packageId = "xidlehook-core 0.1.0 (path+file:///home/user/Coding/Rust/xidlehook/xidlehook-core)";
            usesDefaultFeatures = false;
            features = [ "async-std" ];
          };
        };
        features = {
          "default" = [ "pulse" ];
          "pulse" = [ "xidlehook-core/pulse" ];
        };
        resolvedDefaultFeatures = [ "default" "pulse" ];
      };
    "xidlehook-core 0.1.0 (path+file:///home/user/Coding/Rust/xidlehook/xidlehook-core)"
      = rec {
        crateName = "xidlehook-core";
        version = "0.1.0";
        edition = "2018";
        src = (builtins.filterSource sourceFilter ./xidlehook-core);
        authors = [
          "jD91mZM2 <me@krake.one>"
        ];
        dependencies = {
          "async-std" = {
            packageId = "async-std 0.99.9 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "libpulse-binding" = {
            packageId = "libpulse-binding 2.13.0 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "pa_v12_compatibility" ];
          };
          "log" = "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)";
          "nix" = "nix 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "structopt" = "structopt 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)";
          "xcb" = {
            packageId = "xcb 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)";
            features = [ "x11" "screensaver" ];
          };
        };
        features = {
          "default" = [ "pulse" ];
          "pulse" = [ "libpulse-binding" ];
        };
        resolvedDefaultFeatures = [ "async-std" "default" "libpulse-binding" "pulse" ];
      };
  };

  #
  # crate2nix/default.nix (excerpt start)
  # 

  # Target (platform) data for conditional dependencies.
  # This corresponds to what buildRustCrate is setting.
  target = {
      unix = true;
      windows = false;

      # This doesn't appear to be officially documented anywhere yet.
      # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
      os = if stdenv.hostPlatform.isDarwin
        then "macos"
        else stdenv.hostPlatform.parsed.kernel.name;
      arch = stdenv.hostPlatform.parsed.cpu.name;
      family = "unix";
      env = "gnu";
      endian = if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian" then "little" else "big";
      pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
      vendor = stdenv.hostPlatform.parsed.vendor.name;
      debug_assertions = false;
  };

  /* Filters common temp files and build files */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let baseName = builtins.baseNameOf (builtins.toString name);
    in ! (
      # Filter out git
      baseName == ".gitignore" ||
      (type == "directory" && baseName == ".git" ) ||

      # Filter out build results
      (type == "directory" && (
        baseName == "target" ||
        baseName == "_site" ||
        baseName == ".sass-cache" ||
        baseName == ".jekyll-metadata" ||
        baseName == "build-artifacts"
        )) ||

      # Filter out nix-build result symlinks
      (type == "symlink" && lib.hasPrefix "result" baseName) ||

      # Filter out IDE config
      (type == "directory" && (
        baseName == ".idea" ||
        baseName == ".vscode"
        )) ||
      lib.hasSuffix ".iml" baseName ||

      # Filter out nix build files
      # lib.hasSuffix ".nix" baseName ||

      # Filter out editor backup / swap files.
      lib.hasSuffix "~" baseName ||
      builtins.match "^\\.sw[a-z]$$" baseName != null ||
      builtins.match "^\\..*\\.sw[a-z]$$" baseName != null ||
      lib.hasSuffix ".tmp" baseName ||
      lib.hasSuffix ".bak" baseName ||
      baseName == "tests.nix"
    );

  /* A restricted overridable version of  buildRustCrateWithFeaturesImpl. */
  buildRustCrateWithFeatures = {packageId, features}:
    lib.makeOverridable
      ({features}: buildRustCrateWithFeaturesImpl {inherit packageId features;})
      { inherit features; };

  /* Returns a buildRustCrate derivation for the given packageId and features. */
  buildRustCrateWithFeaturesImpl = { crateConfigs? crates, packageId, features } @ args:
    assert (builtins.isAttrs crateConfigs);
    assert (builtins.isString packageId);
    assert (builtins.isList features);

    let mergedFeatures = mergePackageFeatures args;
        buildByPackageId = packageId:
          let features = mergedFeatures."${packageId}" or [];
              crateConfig = lib.filterAttrs (n: v: n != "resolvedDefaultFeatures") crateConfigs."${packageId}";
              dependencies =
                dependencyDerivations buildByPackageId features (crateConfig.dependencies or {});
              buildDependencies =
                dependencyDerivations buildByPackageId features (crateConfig.buildDependencies or {});
              dependenciesWithRenames =
                lib.filterAttrs (n: v: v ? "rename")
                  (crateConfig.buildDependencies or {} // crateConfig.dependencies or {});
              crateRenames =
                lib.mapAttrs (name: value: value.rename or name) dependenciesWithRenames;
          in buildRustCrate (crateConfig // { inherit features dependencies buildDependencies crateRenames; });
    in buildByPackageId packageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations = buildByPackageId: features: dependencies:
    assert (builtins.isFunction buildByPackageId);
    assert (builtins.isList features);
    assert (builtins.isAttrs dependencies);

    let enabledDependencies = filterEnabledDependencies dependencies features;
        depDerivation = dependencyName: dependency:
        buildByPackageId (dependencyPackageId dependency);
    in builtins.attrValues (lib.mapAttrs depDerivation enabledDependencies);

  /* Returns differences between cargo default features and crate2nix default features.
   *
   * This is useful for verifying the feature resolution in crate2nix.
   */
  diffDefaultPackageFeatures = {crateConfigs ? crates, packageId}:
    assert (builtins.isAttrs crateConfigs);

    let prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures {inherit crateConfigs packageId; features = ["default"]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo = builtins.attrNames (lib.filterAttrs (n: v: !(v ? "crate2nix" ) && (v ? "cargo")) combined);
        onlyInCrate2Nix = builtins.attrNames (lib.filterAttrs (n: v: (v ? "crate2nix" ) && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (n: v:
          (v ? "crate2nix" )
          && (v ? "cargo")
          && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or []))
          combined;
    in builtins.toJSON { inherit onlyInCargo onlyInCrate2Nix differentFeatures; };

  /* Returns the feature configuration by package id for the given input crate. */
  mergePackageFeatures = {crateConfigs ? crates, packageId, features} @ args:
    assert (builtins.isAttrs crateConfigs);
    assert (builtins.isString packageId);
    assert (builtins.isList features);

    let packageFeatures = listOfPackageFeatures args;
        grouped = lib.groupBy (x: x.packageId) packageFeatures;
    in lib.mapAttrs (n: v: sortedUnique (builtins.concatLists (builtins.map (v: v.features) v))) grouped;

  /* Returns a { packageId, features } attribute set for every package needed for building the
     package for the given packageId with the given features.

     Returns multiple, potentially conflicting attribute sets for dependencies that are reachable
     by multiple paths in the dependency tree.
  */
  listOfPackageFeatures = {crateConfigs ? crates, packageId, features, dependencyPath? [packageId]} @ args:
    assert (builtins.isAttrs crateConfigs);
    assert (builtins.isString packageId);
    assert (builtins.isList features);

    let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependencyName: dependency:
          let packageId = dependencyPackageId dependency;
              features = dependencyFeatures expandedFeatures dependencyName dependency;
          in { inherit packageId features; };

        resolveDependencies = path: dependencies:
          assert (builtins.isAttrs dependencies);

          let enabledDependencies = filterEnabledDependencies dependencies expandedFeatures;
              directDependencies =
                builtins.attrValues (lib.mapAttrs depWithResolvedFeatures enabledDependencies);
          in builtins.concatMap
            ({packageId, features}: listOfPackageFeatures {
              # This is purely for debugging.
              dependencyPath = dependencyPath ++ [path packageId];
              inherit crateConfigs packageId features;
            })
             directDependencies;

        resolvedDependencies = builtins.concatLists
          [
            (resolveDependencies "dependencies" (crateConfig.dependencies or {}))
            (resolveDependencies "buildDependencies" (crateConfig.buildDependencies or {}))
          ];

    in [{inherit packageId; features = expandedFeatures;}] ++ resolvedDependencies;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = dependencies: features:
    assert (builtins.isAttrs dependencies);
    assert (builtins.isList features);

    lib.filterAttrs
      (depName: dep:
        builtins.isString dep
        || dep.target or true
        && (!(dep.optional or false) || builtins.any (doesFeatureEnableDependency depName) features))
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = depName: feature:
    let prefix = "${depName}/";
        len = builtins.stringLength prefix;
        startsWithPrefix = builtins.substring 0 len feature == prefix;
    in feature == depName || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further feature names to enable in case this
     feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);

    let expandFeature = feature:
          assert (builtins.isString feature);
          [feature] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
        outFeatures = builtins.concatMap expandFeature inputFeatures;
    in sortedUnique outFeatures;

  /* The package ID of the given dependency. */
  dependencyPackageId = dependency: if builtins.isString dependency then dependency else dependency.packageId;

  /* Returns the actual dependencies for the given dependency. */
  dependencyFeatures = features: dependencyName: dependency:
    assert (builtins.isList features);
    assert (builtins.isString dependencyName);
    assert (builtins.isAttrs dependency || builtins.isString dependency);

    let defaultOrNil = if builtins.isString dependency || dependency.usesDefaultFeatures or true
                       then ["default"]
                       else [];
        explicitFeatures = if builtins.isString dependency then [] else dependency.features or [];
        additionalDependencyFeatures =

          let dependencyPrefix = dependencyName+"/";
              dependencyFeatures =
                builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
          in builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);

    let outFeaturesSet = lib.foldl (set: feature: set // {"${feature}" = 1;} ) {} features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in builtins.sort (a: b: a < b) outFeaturesUnique;

  #
  # crate2nix/default.nix (excerpt end)
  # 

}
